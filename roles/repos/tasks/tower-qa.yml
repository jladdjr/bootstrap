- name: Add tower-qa project, branch {{ branch }}
  git:
    dest: ~/git/tower-qa-{{ branch }}
    repo: git@github.com:jladdjr/tower-qa.git
    accept_hostkey: yes
  tags: tower-qa

- name: Determine which remotes exist
  command: git remote -v
  args:
    chdir: ~/git/tower-qa-{{ branch }}
  register: git_remote
  tags: tower-qa

- name: Add remote repo (ansible)
  command: "{{ item }}"
  args:
    chdir: ~/git/tower-qa-{{ branch }}
  with_items:
    - git remote add ansible git@github.com:ansible/tower-qa.git
    - git fetch ansible
  when: git_remote.stdout.find('ansible') == -1
  tags: tower-qa

- name: Determine if branch already checked out
  command: git branch
  args:
    chdir: ~/git/tower-qa-{{ branch }}
  register: git_branch
  tags: tower-qa

- name: Check out new branch
  command: git checkout -b {{ branch }} ansible/{{ branch }}
  args:
    chdir: ~/git/tower-qa-{{ branch }}
  when: git_branch.stdout.find(branch) == -1
  tags: tower-qa

- name: Check out existing branch
  command: git checkout {{ branch }}
  args:
    chdir: ~/git/tower-qa-{{ branch }}
  when: git_branch.stdout.find(branch) != -1
  tags: tower-qa

- name: Push branch to personal repo
  command: git push --set-upstream origin
  args:
    chdir: ~/git/tower-qa-{{ branch }}
  tags: tower-qa

# Use --system-site-packages in order to use selinux package (provided by libselinux-python rpm)
# https://dmsimard.com/2016/01/08/selinux-python-virtualenv-chroot-and-ansible-dont-play-nice/
# https://github.com/ansible/ansible/issues/34340#issuecomment-355214723
- name: Create tower-qa virtualenv
  shell: . /usr/bin/virtualenvwrapper.sh && mkvirtualenv --python /usr/bin/python3 --system-site-packages tower-qa-{{ branch }}
  args:
    executable: /bin/bash
  environment:
    VIRTUALENVWRAPPER_PYTHON: /usr/bin/python3
  tags: tower-qa

- name: Add tower-qa requirements to venv
  shell: . /usr/bin/virtualenvwrapper.sh && workon tower-qa-{{ branch }} && pip install -U -r requirements.txt
  args:
    executable: /bin/bash
    chdir: ~/git/tower-qa-{{ branch }}
  environment:
    VIRTUALENVWRAPPER_PYTHON: /usr/bin/python3
  tags: tower-qa

- name: Also install ipython
  shell: . /usr/bin/virtualenvwrapper.sh && workon tower-qa-{{ branch }} && pip install ipython
  args:
    executable: /bin/bash
  environment:
    VIRTUALENVWRAPPER_PYTHON: /usr/bin/python3
  tags: tower-qa

# http://ipython.readthedocs.io/en/stable/config/intro.html#setting-configurable-options
- name: Place IPython config folder in mapped folder
  lineinfile:
    path: ~/.bashrc
    line: export IPYTHONDIR=~/mapped/.ipython
  tags: tower-qa

- name: Ensure IPython config folder (and profile_default sub-directory) exist
  file:
    dest: ~/mapped/.ipython/profile_default
    state: directory
    mode: 0755

# https://ipython.readthedocs.io/en/stable/config/intro.html#introduction-to-ipython-configuration
- name: Copy over IPython config
  copy:
    src: ipython_config.py
    dest: ~/mapped/.ipython/profile_default

- name: Create aliases for tower-qa
  blockinfile:
    path: ~/.bashrc
    block: |
      alias v='source /usr/bin/virtualenvwrapper.sh'
      alias tq="cd ~/git/tower-qa-devel; v; workon tower-qa-devel; python --version | head -1; git br | grep '*'"
      alias get_project_home='JDL_PROJECT_HOME=~/git/$(pwd | cut -d '/' -f 5)'
      alias t='get_project_home; cd ${JDL_PROJECT_HOME}/tests/api'
      alias f='get_project_home; cd ${JDL_PROJECT_HOME}/tests/lib/fixtures/api'
    marker: "# {mark} ANSIBLE MANAGED BLOCK - tower-qa"
  when: branch == "devel"
  tags: tower-qa

- name: Create aliases for tower-qa release branches
  blockinfile:
    path: ~/.bashrc
    block: |
      alias tq{{ branch | replace('release_', '') | replace('.', '') }}="cd ~/git/tower-qa-{{ branch }}; v; workon tower-qa-{{ branch }}; python --version | head -1; git br | grep '*'"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - tower-qa ({{ branch }})"
  when: branch != "devel"
  tags: tower-qa

- name: Check if AWS creds already in place
  shell: cat ~/.bashrc
  register: bashrc
  tags: tower-qa

- name: Create placeholder for AWS creds
  blockinfile:
    path: ~/.bashrc
    block: |
      # Required by playbooks/inventory-ec2.py
      export AWS_ACCESS_KEY_ID='CHANGEME'
      export AWS_SECRET_ACCESS_KEY='CHANGEME'
    marker: "# {mark} ANSIBLE MANAGED BLOCK - AWS Creds"
  when: bashrc.stdout.find('AWS_ACCESS_KEY_ID') == -1
  tags: tower-qa
