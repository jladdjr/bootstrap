- name: Ensure mapped folder exists
  file:
    path: /var/mapped
    state: directory
    mode: 0700
    owner: vagrant
    group: vagrant
  become: true

- name: Add bash configuration
  blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK - .bashrc"
    path: ~/.bashrc
    block: |
      alias h='cd $(pwd | cut -d '/' -f 1-5); pwd'  # Move to head (top) folder of git projects (bit hacky)

      # History
      # https://www.gnu.org/software/bash/manual/html_node/Bash-History-Builtins.html
      shopt -s histappend   # append to history, don't overwrite it
      export HISTFILE="/var/mapped/bash_history"
      export HISTCONTROL=   # allow duplicate entries
      export HISTSIZE=      # unlimited history
      export HISTFILESIZE=  # unlimited history
      export HISTTIMEFORMAT="%F %T: "
      export PROMPT_COMMAND="history -a; $PROMPT_COMMAND"  # Append command to history after it completes (use `history -r` to reload history in other sessions)

      # In history file, note when new session is started
      # https://stackoverflow.com/questions/911168/how-to-detect-if-my-shell-script-is-running-through-a-pipe
      if [ -t 1 ]; then echo -e "#$(date +%s)\n#--- new session ---" >> $HISTFILE; fi

      # Open all files changed in this branch (compared to ansible/<default branch>)
      alias v='vi $(git diff --name-only $(git merge-base HEAD ansible/$(git symbolic-ref refs/remotes/origin/HEAD | sed "s@^refs/remotes/origin/@@")))'

      alias vw='source /usr/bin/virtualenvwrapper.sh'

      # Set prompt

      # get current branch in git repo
      function parse_git_branch() {
          BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
          if [ ! "${BRANCH}" == "" ]
          then
              STAT=`parse_git_dirty`
              echo "[${BRANCH}${STAT}] "
          else
              echo ""
          fi
      }

      # get current status of git repo
      function parse_git_dirty {
          status=`git status 2>&1 | tee`
          dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
          untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
          ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
          newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
          renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
          deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
          bits=''
          if [ "${renamed}" == "0" ]; then
              bits=">${bits}"
          fi
          if [ "${ahead}" == "0" ]; then
              bits="*${bits}"
          fi
          if [ "${newfile}" == "0" ]; then
              bits="+${bits}"
          fi
          if [ "${untracked}" == "0" ]; then
              bits="?${bits}"
          fi
          if [ "${deleted}" == "0" ]; then
              bits="x${bits}"
          fi
          if [ "${dirty}" == "0" ]; then
              bits="!${bits}"
          fi
          if [ ! "${bits}" == "" ]; then
              echo " ${bits}"
          else
              echo ""
          fi
      }

      # Abbreviated directory
      # https://unix.stackexchange.com/questions/26844/abbreviated-current-directory-in-shell-prompt
      prompt_dir () {
        p="${PWD#${HOME}}"
        [ "${PWD}" != "${p}" ] && printf "~"
        IFS=/
        for q in ${p:1}
          do printf /${q:0:1}
        done
        printf "${q:1}"
      }

      # Prompt colors:
      # https://unix.stackexchange.com/questions/124407/what-color-codes-can-i-use-in-my-ps1-prompt
      export PS1="\\[$(tput setaf 34)\\]\\u@\\h \\[$(tput setaf 172)\\]\`prompt_dir\` \\[$(tput setaf 34)\\]$ \\[$(tput setaf 32)\\]\`parse_git_branch\`\\[$(tput sgr0)\\]"

      f () {
          DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed "s@^refs/remotes/origin/@@")
          HEAD1=$(git rev-list -n 1 ansible/${DEFAULT_BRANCH})
          git fetch ansible
          HEAD2=$(git rev-list -n 1 ansible/${DEFAULT_BRANCH})
          git diff --stat ${HEAD1}..${HEAD2}
      }

      r () {
          DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed "s@^refs/remotes/origin/@@")
          git rebase ansible/${DEFAULT_BRANCH}
      }

      alias d='git diff ${HEAD1}..${HEAD2}'
      alias o='git diff --stat ${HEAD1}..${HEAD2}'
      alias l='git llog ${HEAD1}..${HEAD2}'

      alias to='ssh jim@tokyo'

      export MAPPED_FOLDER='/var/mapped'
